// Задайте массив из N случайных чисел (N вводится с клавиатуры).
// Найдите количество чисел, которые оканчиваются на 1 и делятся нацело на 7.

void Main()
{
    int sizeOfArray = ReadInt("Введите размер массива: ");
    // то есть в качестве параметра size будет указываться переменная в которой
    // указана функция на вызов числа у пользователя
    int[] array = GenerateArray(sizeOfArray, 0, 99);
    // так как метод PrintArray ничего не возвращает, то для того, чтобы его
    // вызвать нет необходимости в том, чтобы создать переменную. Просто указываем метод
    // и в качестве аргумета передаём ему массив, с которым он будет работать
    PrintArray(array);
    System.Console.WriteLine(CountElements(array));
}

// Создаём функцию для решения задачи
int CountElements(int[] array)
{
    int count = 0;
    foreach(int num in array)
    {
        if(num % 10 == 1 && num % 7 == 0)
        {
            count++;
        }
    }
    return count;
}


// Создаём метод, который будет выводить массив. Так как мы создаём метод для
// вывода массива, то тип значения у него будет void
void PrintArray(int[] arrayForPrint)
{
    for (int i = 0; i < arrayForPrint.Length; i++)
    {
        System.Console.Write(arrayForPrint[i] + " ");
    }
    System.Console.WriteLine();
}


// Создаём функцию на генерирование массива, которая будет возвращать
// массив из целых чисел. В качестве аргумента укажем size, то есть это 
// число, ктоторое будет передаваться пользователем minRange и maxRange - 
// аргументы, которые будут передаваться в функцию при её вызове
int[] GenerateArray(int size, int minRange, int maxRange)
{
    // temp сокращение от temparary - что означает временный
    int[] tempArray = new int[size];
    // создаём экземпляр класса для хранения рандомной переменной
    Random temp = new Random();
    // создаём цикл, который будет проходить по всем элементам массива.
    for(int i = 0; i < tempArray.Length; i++)
    {
        // в данном цикле каждый последующий i - будет заполняться любым рандомным числом
        // new означает, что под эту задачу в оперативной памяти выделяется ячейка памяти
        // в скобках мы можем указать одно или два числа. Если одно - то это будет означать 
        // максимальное из сгенерированных чисел от 0 до этого числа, а если два числа - то
        // эти числа будут указывать на границы нижней и верней генерации не включая число верхней,
        // однако если к maxRange добавить 1, то верхний диапозон включается, что удобно для понимания 
        // пользоватеем, так как он об этих правилах не знает
        // tempArray[i] = new Random().Next(minRange, maxRange + 1);
        tempArray[i] = temp.Next(minRange, maxRange + 1);
    } 
    // и делаем возврат нашего массива, то есть сгенерированный массив вернётся на место вызова функции
    return tempArray;
}

// Создаём функцию, которая будет запрашивать число у 
// пользователя и преобразовывать его в целочисленное значение
int ReadInt(string msg)
{
    // Первый способ решения
    // System.Console.WriteLine("Введите число: ");
    // int number = Convert.ToInt32(Console.ReadLine());
    // return number;
    // Далее рассмотрим второй способ решения - сократим код
    System.Console.Write(msg);
    return Convert.ToInt32(Console.ReadLine());
}

Main();